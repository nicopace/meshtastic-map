services:
  mosquitto:
    image: eclipse-mosquitto
    hostname: mosquitto
    container_name: mosquitto
    restart: unless-stopped
    ports:
      - "1883:1883"
      - "9001:9001"
    volumes:
      - ./mosquitto:/etc/mosquitto
      - ./mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf
    networks:
      - proxynet

  # listens to mqtt packets and saves to database
  meshtastic-mqtt:
    container_name: meshtastic-mqtt
    depends_on:
      database:
        condition: service_healthy
    build:
      context: .
      dockerfile: ./Dockerfile
    command: /app/docker/mqtt.sh
    environment:
      DATABASE_URL: "mysql://root:password@database:3306/meshtastic-map?connection_limit=100"
      MQTT_OPTS: "--mqtt-broker-url mqtt://mosquitto --mqtt-username user --mqtt-password password" # add any custom mqtt.js options here
    networks:
      - proxynet

  # runs the web map ui
  meshtastic-map:
    container_name: meshtastic-map
    depends_on:
      database:
        condition: service_healthy
    build:
      context: .
      dockerfile: ./Dockerfile
    command: /app/docker/map.sh
    environment:
      DATABASE_URL: "mysql://root:password@database:3306/meshtastic-map?connection_limit=100"
      MAP_OPTS: "" # add any custom index.js options here
      VIRTUAL_HOST: "127.0.0.1"
      VIRTUAL_PORT: "8080"
    expose:
      - "8080"
    networks:
      - proxynet

  # runs the database to store everything from mqtt
  database:
    container_name: database
    image: bitnami/mariadb
    ports:
      - 3306:3306/tcp
    environment:
      MARIADB_DATABASE: "meshtastic-map"
      MARIADB_ROOT_PASSWORD: "password"
    volumes:
      - database_data:/bitnami/mariadb
    healthcheck:
      test: ['CMD', '/opt/bitnami/scripts/mariadb/healthcheck.sh']
      interval: 15s
      timeout: 5s
      retries: 6
      start_interval: 5s
    networks:
      - proxynet

  # nginx proxy for password protection
  nginx-proxy:
    container_name: nginx-proxy
    restart: always
    image: jwilder/nginx-proxy
    networks:
      - proxynet
    ports:
      - "8080:80"
    volumes:
      - /srv/docker/nginx/htpasswd:/etc/nginx/htpasswd
      - /etc/nginx/vhost.d
      - /usr/share/nginx/html
      - /var/run/docker.sock:/tmp/docker.sock:ro
    environment:
      DEFAULT_HOST: "127.0.0.1"

networks:
  proxynet:
    external: true

volumes:
  database_data:
